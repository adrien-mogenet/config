
;; ----------------------------------------------------------------------------
;; BASIS OPTIONS
;; ----------------------------------------------------------------------------

;; PERSONAL INFORMATIONS
(setq user-full-name "Adrien Mogenet"
      user-mail-address "adrien.mogenet@gmail.com"
      signature-file "~/.signature")

;; CUSTOM BASIS BEHAVIOR
(add-hook 'white-file-hooks 'delete-trailing-whitespaces)
(setq-default indicate-empty-lines t)
(setq-default show-trailing-whitespace t)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(setq text-mode-hook 'turn-on-auto-fill)
(setq fill-column 80)

;; OPTIONS
(setq inhibit-startup-message t)        ; don't show the GNU splash screen
(setq frame-title-format "%b")          ; titlebar shows buffer's name
(global-font-lock-mode t)               ; syntax highlighting
(setq font-lock-maximum-decoration t)   ; max decoration for all modes
(setq transient-mark-mode 't)           ; highlight selection
(setq line-number-mode 't)              ; line number
(setq column-number-mode 't)            ; column number
(when (display-graphic-p)               ; if graphic
  (scroll-bar-mode nil)                 ; no scroll bar
  (mouse-wheel-mode t)                  ; enable mouse wheel
  (tool-bar-mode nil)                   ; no tool bar
  )
(menu-bar-mode nil)                     ; no menu bar
(setq scroll-step 1)                    ; smooth scrolling
(setq normal-erase-is-backspace-mode t) ; make delete work as it should
(fset 'yes-or-no-p 'y-or-n-p)           ; 'y or n' instead of 'yes or no'
(setq default-major-mode 'text-mode)    ; change default major mode to text
(setq ring-bell-function 'ignore)       ; turn the alarm totally off
(setq make-backup-files nil)            ; no backupfile
(global-auto-revert-mode t)             ; auto revert modified files
(pc-selection-mode)                     ; selection with shift
(auto-image-file-mode)                  ; to see picture in emacs
(show-paren-mode t)                     ; Paren match highlighting
(add-hook 'write-file-hooks 'delete-trailing-whitespace) ;; Delete trailing whitespaces on save
(setq compilation-window-height 10)     ; pour que la fenetre de compilation ne soit pas trop grande
(setq compilation-scroll-output t)      ; va tjs en bas de la fenetre de compile
(setq-default gdb-many-windows t)       ; Better gdb

;; ENCODING
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-language-environment 'utf-8)

;; DISPLAY COLORS
(progn
  (set-background-color "black")
  (set-foreground-color "white")
  (set-cursor-color "Orangered")
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   ))

;; DISPLAY FONT
(setq default-font-size 135)
(defun set-font-size (&optional size)
  "Set the font size to SIZE (default: default-font-size)."
  (interactive "nSize: ")
  (unless size
    (setq size default-font-size))
  (set-face-attribute 'default nil :height size))
(defun reset-font-size ()
  (interactive)
  (set-font-size))
(defun find-next (c l)
    (if (< c (car l))
        (car l)
      (if (cdr l)
          (find-next c (cdr l))
        (car l))))
(defun inc-font-size ()
  (interactive)
  (let ((sizes '(60 75 90 105 120 135 170 280))
        (current (face-attribute 'default :height)))
    (let ((new (find-next current sizes)))
      (set-font-size new)
      (message (int-to-string new)))))
(set-font-size)

;; SET MODES FROM FILE EXTENSIONS
(add-to-list 'auto-mode-alist '("configure$" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Drakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\emacs$" . lisp-mode))


;; ----------------------------------------------------------------------------
;; MODULES CONFIGURATIONS
;; ----------------------------------------------------------------------------

;; IDO-MODE -  Open files/switch buffers
;; tab means tab, i.e. complete. Not "open this file", stupid.
(setq ido-confirm-unique-completion t)
;; activate I Do mode
(ido-mode t)
;; If the file doesn't exist, do try to invent one from a transplanar
;; directory. I just want a new file.
(setq ido-auto-merge-work-directories-length -1)
;; Don't switch to GDB-mode buffers
(setq ido-ignore-buffers (quote ("\\`\\*breakpoints of.*\\*\\'" "\\`\\*stack frames of.*\\*\\'" "\\`\\*gud\\*\\'" "\\`\\*locals of.*\\*\\'" "\\` ")))
;;  )

;; UNIQUIFY
;; Enhanced unique buffer names
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)

;; ISPELL
(require 'ispell)
(setq ispell-dictionary "francais")
(add-hook 'LaTeX-mode-hook 'flyspell-mode)

;; ABBREV
;; pabbrev, predictive mode
(load "~/.emacs.d/pabbrev.el")
(require 'pabbrev)
(global-pabbrev-mode)

;; PUPPET
(load-file "~/.emacs.d/puppet/puppet-mode.el")
(load-file "~/.emacs.d/puppet/puppet-mode-init.el")


;; ----------------------------------------------------------------------------
;; PLATFORM SPECIFIC OPTIONS
;; ----------------------------------------------------------------------------

;; MACOSX
(if (eq window-system 'mac)
    (progn
      ;;(add-to-list 'default-frame-alist '(alpha . 95))
      ;;(add-to-list 'default-frame-alist '(font . "-apple-courier-medium-r-normal--12-100-72-72-m-100-mac-roman"))
      ;;(load "~/.emacs.d/maxframe.el")
      ;;(add-to-list 'default-frame-alist '(cursor-color . "Orangered"))
      ;;(require 'maxframe)
      (add-hook 'window-setup-hook 'maximize-frame t)))


;; ----------------------------------------------------------------------------
;; LANGUAGE SPECIFIC OPTIONS
;; ----------------------------------------------------------------------------

;; SHELL
(defun insert-shell-shebang ()
  (interactive)
  (when (buffer-file-name)
    (goto-char (point-min))
    (insert "#!/bin/sh\n\n"))
)

;; DOXYGEN
;; Enable Doxygen syntax highlighting for C and C++
;; (require 'doxymacs)
(add-hook 'font-lock-mode-hook
	  '(lambda ()
             (if (or (eq major-mode 'c-mode)
		     (or (eq major-mode 'c++-mode) (eq major-mode 'javascript-mode)))
                 (doxymacs-font-lock))))

;; C HOOKS
;; add header guard
(defun insert-header-guard ()
  (interactive)
  (save-excursion
    (when (buffer-file-name)
      (let*
          (
           (name (file-name-nondirectory buffer-file-name))
           (macro (replace-regexp-in-string "\\." "_" (upcase name)))
           (macro (replace-regexp-in-string "-" "_" macro))
           (macro (concat macro "_"))
           )
        (goto-char (point-min))
        (insert "#ifndef " macro "\n")
        (insert "# define " macro "\n\n")
        (goto-char (point-max))
        (insert "\n#endif /* !" macro " */\n")
        )
      )
    )
  )

;; AUTO INSERT C/C++ HEADER GUARD
(add-hook 'find-file-hooks
          (lambda ()
            (when (and (memq major-mode '(c-mode c++-mode)) (equal (point-min) (point-max)) (string-match ".*\\.hh?" (buffer-file-name)))
              (insert-header-guard)
              (goto-line 3)
              (insert "\n"))))

;; C / C++ MODE
(require 'cc-mode)
(add-to-list 'c-style-alist
             '("checkstyle"
               (c-basic-offset . 2)
               (c-comment-only-line-offset . 0)
               (c-hanging-braces-alist     . ((substatement-open before after)))
               (c-offsets-alist . ((topmost-intro        . 0)
                                   (substatement         . +)
                                   (substatement-open    . 0)
                                   (case-label           . +)
                                   (access-label         . -)
                                   (inclass              . ++)
                                   (inline-open          . 0)))))
(setq c-default-style "checkstyle")

(defun c-insert-braces (&optional r)
  (interactive "P")
  (c-insert-block r))

(defun c-insert-ns (name r)
  (interactive "sName: \nP")
  (c-insert-block r (concat "namespace " name "\n")))

(defun c-insert-switch (value r)
  (interactive "sValue: \nP")
  (c-insert-block r (concat "switch (" value ")\n")))

(defun c-insert-if (c r)
  (interactive "sCondition: \nP")
  (c-insert-block r (concat "if (" c ")\n")))

(defun c-insert-class (name)
  (interactive "sName: ")
  (c-insert-block () (concat "class " name "\n") ";")
  (insert "public:")
  (c-indent-line)
  (insert "\n")
  (c-indent-line))


;; ----------------------------------------------------------------------------
;; BINDINGS
;; ----------------------------------------------------------------------------

;; BINDINGS :: isearch
(global-set-key [(control f)] 'isearch-forward-regexp)  ; search regexp
(global-set-key [(control r)] 'query-replace-regexp)    ; replace regexp
(define-key
 isearch-mode-map
 [(control n)]
 'isearch-repeat-forward)                              ; next occurence
(define-key
 isearch-mode-map
 [(control p)]
 'isearch-repeat-backward)                             ; previous occurence
(define-key
 isearch-mode-map
 [(control z)]
 'isearch-cancel)                                      ; quit and go back to start point
(define-key
 isearch-mode-map
 [(control f)]
 'isearch-exit)                                        ; abort
(define-key
 isearch-mode-map
 [(control r)]
 'isearch-query-replace)                               ; switch to replace mode
(define-key
 isearch-mode-map
 [S-insert]
 'isearch-yank-kill)                                   ; paste
(define-key
 isearch-mode-map
 [(control e)]
 'isearch-toggle-regexp)                               ; toggle regexp
(define-key
 isearch-mode-map
 [(control l)]
 'isearch-yank-line)                                   ; yank line from buffer
(define-key
 isearch-mode-map
 [(control w)]
 'isearch-yank-word)                                   ; yank word from buffer
(define-key
 isearch-mode-map
 [(control c)]
 'isearch-yank-char)                                   ; yank char from buffer

;; BINDINGS :: misc
(global-set-key [(control z)] 'undo)                    ; undo
(global-set-key [C-home] 'beginning-of-buffer)          ; go to the beginning of buffer
(global-set-key [C-end] 'end-of-buffer)                 ; go to the end of buffer
(global-set-key [(meta g)] 'goto-line)                  ; goto line #
(global-set-key [M-left] 'windmove-left)                ; move to left window
(global-set-key [M-right] 'windmove-right)              ; move to right window
(global-set-key [M-up] 'windmove-up)                    ; move to upper window
(global-set-key [M-down] 'windmove-down)                ; move to down window
(global-set-key [(control tab)] 'other-window)          ; Ctrl-Tab = Next buffer
(global-set-key [C-S-iso-lefttab]
                '(lambda () (interactive)
                   (other-window -1)))                  ; Ctrl-Shift-Tab = Previous buffer
(global-set-key [f12] 'replace-string)

;; BINDINGS :: for use within terminal
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>") 'windmove-up)
(global-set-key (kbd "C-c <left>") 'windmove-left)
(global-set-key (kbd "C-c <down>") 'windmove-down)
(global-set-key (kbd "M-DEL") 'backward-kill-word)

;; BINDINGS :: compile
(global-set-key [f8] 'previous-error)
(global-set-key [f9] 'next-error)
(global-set-key [f10] 'recompile)
(global-set-key [f11] 'compile)

;; BINDINGS :: font size
(global-set-key [(control +)] 'inc-font-size)
(global-set-key [(control =)] 'reset-font-size)

;; BINDINGS :: ido
(global-set-key [(control b)] 'ido-switch-buffer)


;; ----------------------------------------------------------------------------
;; FINALIZE
;; ----------------------------------------------------------------------------

;; ADVANCED CUSTOM OPTIONS
;; Put it at the end of config file
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(ecb-options-version "2.32")
 '(mac-allow-anti-aliasing nil)
 '(mac-font-panel-mode nil)
 '(mac-input-method-mode nil)
 '(show-paren-mode t)
 '(transient-mark-mode t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
)

(add-to-list 'load-path "~/.emacs.d/")
